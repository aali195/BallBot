/*
 * This file is generated by jOOQ.
 */
package com.github.ball.ballbot.domain.generated.tables


import com.github.ball.ballbot.domain.generated.BallbotSchema
import com.github.ball.ballbot.domain.generated.indexes.PICTURE_NAME_IDX
import com.github.ball.ballbot.domain.generated.indexes.PICTURE_TAGS_IDX
import com.github.ball.ballbot.domain.generated.keys.PICTURE_PKEY
import com.github.ball.ballbot.domain.generated.keys.PICTURE__PICTURE_GUILD_ID_FKEY
import com.github.ball.ballbot.domain.generated.tables.records.PictureRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Picture(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PictureRecord>?,
    aliased: Table<PictureRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PictureRecord>(
    alias,
    BallbotSchema.BALLBOT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>ballbot_schema.picture</code>
         */
        val PICTURE: Picture = Picture()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PictureRecord> = PictureRecord::class.java

    /**
     * The column <code>ballbot_schema.picture.id</code>.
     */
    val ID: TableField<PictureRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>ballbot_schema.picture.created</code>.
     */
    val CREATED: TableField<PictureRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>ballbot_schema.picture.guild_id</code>.
     */
    val GUILD_ID: TableField<PictureRecord, String?> = createField(DSL.name("guild_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.picture.uploader_id</code>.
     */
    val UPLOADER_ID: TableField<PictureRecord, String?> = createField(DSL.name("uploader_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.picture.name</code>.
     */
    val NAME: TableField<PictureRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.picture.url</code>.
     */
    val URL: TableField<PictureRecord, String?> = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.picture.tags</code>.
     */
    val TAGS: TableField<PictureRecord, Array<String?>?> = createField(DSL.name("tags"), SQLDataType.CLOB.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<PictureRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PictureRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>ballbot_schema.picture</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>ballbot_schema.picture</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>ballbot_schema.picture</code> table reference
     */
    constructor(): this(DSL.name("picture"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PictureRecord>): this(Internal.createPathAlias(child, key), child, key, PICTURE, null)
    override fun getSchema(): Schema? = if (aliased()) null else BallbotSchema.BALLBOT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(PICTURE_NAME_IDX, PICTURE_TAGS_IDX)
    override fun getIdentity(): Identity<PictureRecord, Long?> = super.getIdentity() as Identity<PictureRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<PictureRecord> = PICTURE_PKEY
    override fun getReferences(): List<ForeignKey<PictureRecord, *>> = listOf(PICTURE__PICTURE_GUILD_ID_FKEY)

    private lateinit var _guild: Guild
    fun guild(): Guild {
        if (!this::_guild.isInitialized)
            _guild = Guild(this, PICTURE__PICTURE_GUILD_ID_FKEY)

        return _guild;
    }
    override fun `as`(alias: String): Picture = Picture(DSL.name(alias), this)
    override fun `as`(alias: Name): Picture = Picture(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Picture = Picture(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Picture = Picture(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Long?, OffsetDateTime?, String?, String?, String?, String?, Array<String?>?> = super.fieldsRow() as Row7<Long?, OffsetDateTime?, String?, String?, String?, String?, Array<String?>?>
}
