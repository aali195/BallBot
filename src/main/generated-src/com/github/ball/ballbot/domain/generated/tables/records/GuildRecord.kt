/*
 * This file is generated by jOOQ.
 */
package com.github.ball.ballbot.domain.generated.tables.records


import com.github.ball.ballbot.domain.generated.tables.Guild

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GuildRecord() : UpdatableRecordImpl<GuildRecord>(Guild.GUILD), Record4<String?, OffsetDateTime?, OffsetDateTime?, String?> {

    var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    var joined: OffsetDateTime?
        set(value): Unit = set(1, value)
        get(): OffsetDateTime? = get(1) as OffsetDateTime?

    var lastUpdated: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    var prefix: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, OffsetDateTime?, OffsetDateTime?, String?> = super.fieldsRow() as Row4<String?, OffsetDateTime?, OffsetDateTime?, String?>
    override fun valuesRow(): Row4<String?, OffsetDateTime?, OffsetDateTime?, String?> = super.valuesRow() as Row4<String?, OffsetDateTime?, OffsetDateTime?, String?>
    override fun field1(): Field<String?> = Guild.GUILD.ID
    override fun field2(): Field<OffsetDateTime?> = Guild.GUILD.JOINED
    override fun field3(): Field<OffsetDateTime?> = Guild.GUILD.LAST_UPDATED
    override fun field4(): Field<String?> = Guild.GUILD.PREFIX
    override fun component1(): String? = id
    override fun component2(): OffsetDateTime? = joined
    override fun component3(): OffsetDateTime? = lastUpdated
    override fun component4(): String? = prefix
    override fun value1(): String? = id
    override fun value2(): OffsetDateTime? = joined
    override fun value3(): OffsetDateTime? = lastUpdated
    override fun value4(): String? = prefix

    override fun value1(value: String?): GuildRecord {
        this.id = value
        return this
    }

    override fun value2(value: OffsetDateTime?): GuildRecord {
        this.joined = value
        return this
    }

    override fun value3(value: OffsetDateTime?): GuildRecord {
        this.lastUpdated = value
        return this
    }

    override fun value4(value: String?): GuildRecord {
        this.prefix = value
        return this
    }

    override fun values(value1: String?, value2: OffsetDateTime?, value3: OffsetDateTime?, value4: String?): GuildRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised GuildRecord
     */
    constructor(id: String? = null, joined: OffsetDateTime? = null, lastUpdated: OffsetDateTime? = null, prefix: String? = null): this() {
        this.id = id
        this.joined = joined
        this.lastUpdated = lastUpdated
        this.prefix = prefix
    }
}
