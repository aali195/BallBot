/*
 * This file is generated by jOOQ.
 */
package com.github.ball.ballbot.domain.generated.tables


import com.github.ball.ballbot.domain.generated.BallbotSchema
import com.github.ball.ballbot.domain.generated.indexes.CHANNEL_ID_URL_NAME_IDX
import com.github.ball.ballbot.domain.generated.keys.TWITTER_SCHEDULE_TASK_PKEY
import com.github.ball.ballbot.domain.generated.keys.TWITTER_SCHEDULE_TASK__TWITTER_SCHEDULE_TASK_GUILD_ID_FKEY
import com.github.ball.ballbot.domain.generated.tables.records.TwitterScheduleTaskRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TwitterScheduleTask(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TwitterScheduleTaskRecord>?,
    aliased: Table<TwitterScheduleTaskRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TwitterScheduleTaskRecord>(
    alias,
    BallbotSchema.BALLBOT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>ballbot_schema.twitter_schedule_task</code>
         */
        val TWITTER_SCHEDULE_TASK: TwitterScheduleTask = TwitterScheduleTask()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TwitterScheduleTaskRecord> = TwitterScheduleTaskRecord::class.java

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.id</code>.
     */
    val ID: TableField<TwitterScheduleTaskRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.added</code>.
     */
    val ADDED: TableField<TwitterScheduleTaskRecord, OffsetDateTime?> = createField(DSL.name("added"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.guild_id</code>.
     */
    val GUILD_ID: TableField<TwitterScheduleTaskRecord, String?> = createField(DSL.name("guild_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.channel_id</code>.
     */
    val CHANNEL_ID: TableField<TwitterScheduleTaskRecord, String?> = createField(DSL.name("channel_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.uploader_id</code>.
     */
    val UPLOADER_ID: TableField<TwitterScheduleTaskRecord, String?> = createField(DSL.name("uploader_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.url_name</code>.
     */
    val URL_NAME: TableField<TwitterScheduleTaskRecord, String?> = createField(DSL.name("url_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>ballbot_schema.twitter_schedule_task.update_interval</code>.
     */
    val UPDATE_INTERVAL: TableField<TwitterScheduleTaskRecord, Long?> = createField(DSL.name("update_interval"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.media_only</code>.
     */
    val MEDIA_ONLY: TableField<TwitterScheduleTaskRecord, Boolean?> = createField(DSL.name("media_only"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>ballbot_schema.twitter_schedule_task.description</code>.
     */
    val DESCRIPTION: TableField<TwitterScheduleTaskRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<TwitterScheduleTaskRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TwitterScheduleTaskRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>ballbot_schema.twitter_schedule_task</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>ballbot_schema.twitter_schedule_task</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>ballbot_schema.twitter_schedule_task</code> table
     * reference
     */
    constructor(): this(DSL.name("twitter_schedule_task"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TwitterScheduleTaskRecord>): this(Internal.createPathAlias(child, key), child, key, TWITTER_SCHEDULE_TASK, null)
    override fun getSchema(): Schema? = if (aliased()) null else BallbotSchema.BALLBOT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(CHANNEL_ID_URL_NAME_IDX)
    override fun getIdentity(): Identity<TwitterScheduleTaskRecord, Long?> = super.getIdentity() as Identity<TwitterScheduleTaskRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<TwitterScheduleTaskRecord> = TWITTER_SCHEDULE_TASK_PKEY
    override fun getReferences(): List<ForeignKey<TwitterScheduleTaskRecord, *>> = listOf(TWITTER_SCHEDULE_TASK__TWITTER_SCHEDULE_TASK_GUILD_ID_FKEY)

    private lateinit var _guild: Guild
    fun guild(): Guild {
        if (!this::_guild.isInitialized)
            _guild = Guild(this, TWITTER_SCHEDULE_TASK__TWITTER_SCHEDULE_TASK_GUILD_ID_FKEY)

        return _guild;
    }
    override fun `as`(alias: String): TwitterScheduleTask = TwitterScheduleTask(DSL.name(alias), this)
    override fun `as`(alias: Name): TwitterScheduleTask = TwitterScheduleTask(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TwitterScheduleTask = TwitterScheduleTask(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TwitterScheduleTask = TwitterScheduleTask(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Long?, OffsetDateTime?, String?, String?, String?, String?, Long?, Boolean?, String?> = super.fieldsRow() as Row9<Long?, OffsetDateTime?, String?, String?, String?, String?, Long?, Boolean?, String?>
}
